= form_for([:admin, @academic_period, @lecture]) do |f|
  = f.error_messages

  .clearfix
    = f.label :code, nil, :class => :required
    .input
      = f.text_field :code, :disabled => (@lecture.id), :class => :input_medium
  
  .clearfix
    = f.label :discipline_id, nil, :class => :required
    .input
      = select_tag :course_id, options_from_collection_for_select(Course.all, :id, :name, @lecture.discipline ? @lecture.discipline.course_id : nil), :include_blank => true
       
      - if @lecture.discipline
        = select_tag :discipline_code, options_from_collection_for_select(@lecture.discipline.course.disciplines.latest_versions.all, :id, :name, @lecture.discipline_id), :include_blank => true, :class => :xlarge
      - else
        = select_tag :discipline_code, nil, :include_blank => true
      
      = f.collection_select :discipline_id, (@lecture.discipline ? @lecture.discipline.versions : []), :id, :version
  
  .clearfix
    = f.label :professor_ids, (t 'Professors'), :class => :required
    .input
      = f.collection_select :professor_ids, @lecture.professors, :id, :name, {}, {:multiple => true}
  
  .clearfix
    = f.label :places
    .input
      = f.text_field :places, :class => :input_small
  
  .clearfix
    = label_tag t 'TimeTable'
    .input
      - if @lecture.lecture_time_slots.exists?
        - for time_slot in @lecture.lecture_time_slots
          .clearfix
            = select_tag 'weekday[]', options_for_select(get_day_names_map, time_slot.weekday)
            = text_field_tag 'start_time[]', time_slot.start_time_string, :class => 'time'
            = t 'until'  
            = text_field_tag 'end_time[]', time_slot.end_time_string, :class => 'time'
            = submit_tag (t 'Remove'), {:class => 'remove-item', :type => 'button'}
      
      .clearfix
        = select_tag 'weekday[]', options_for_select(get_day_names_map), :class => 'small'
        = text_field_tag 'start_time[]', nil, :class => 'time small'
        = t 'until'  
        = text_field_tag 'end_time[]', nil, :class => 'time small'
        = submit_tag (t 'AddAnother'), {:class => 'add-another-item btn', :type => 'button'}
      
      %span.help-block= t 'TimeTableAdminNotice'
  
  .actions
    = f.submit nil, :class => 'btn primary'
 
:javascript
  $(document).ready(function() {
    function update_discipline_codes() {
      $('#discipline_code option').remove()
      $.ajax({
        url: "#{admin_courses_path}/" + $('#course_id').val() + '/disciplines.json', 
        success: function(data) {
          $(data).each(function(i, item) {
            $('#discipline_code').append('<option value="' + item.id + '">' + item.name + '</option>')
          })
        }, 
        complete: function() {
          $('#discipline_code').val($('#discipline_code option:first').val())
          update_discipline_versions()
        }
      })
      
      update_discipline_versions()
    }
    
    function update_discipline_versions() {
      $('#lecture_discipline_id option').remove()
      
      if (!$('#discipline_code').val()) {
        return true;
      }
      
      $.ajax({
        url: "#{admin_courses_path}/" + $('#course_id').val() + '/disciplines/' + $('#discipline_code').val() + '/versions.json', 
        success: function(data) {
          $(data).each(function(i, item) {
            $('#lecture_discipline_id').append('<option value="' + item.id + '">' + item.version + '</option>')
          })
        },
        complete: function(data) {
          $('#lecture_discipline_id').val($('#lecture_discipline_id option:first').val())
        }
      })
    }
    
    $('#course_id').change(function() {
      update_discipline_codes()
    });
    
    $('#discipline_code').change(function() {
      update_discipline_versions()
    });
    
    
    Application.autocomplete('lecture_professor_ids', "#{professors_path}.js", "#{t 'Remove'}", true)
    Application.enableAddAnotherItem("#{t 'Remove'}")
    $('input[name*=places]').spinner({allowNull: true, min: 0, max: 10000})
  });